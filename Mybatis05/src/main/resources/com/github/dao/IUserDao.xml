<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> <mapper namespace="com.github.dao.IUserDao">
    <!-- 定义sql语句-->
    <sql id="defaultSql">
        SELECT * FROM USER
    </sql>
    <!-- 开启二级缓存的支持 -->
    <cache></cache>
    <!-- 根据用户信息查询 -->
    <select id="findByUser" resultType="user" parameterType="user">
        select * from user where 1=1
        <if test="username!=null and username != '' ">
            and username like #{username}
        </if> <if test="address != null">
        and address like #{address}
    </if>
    </select>

    <!-- 查询所有用户在 id 的集合之中 -->
    <select id="findInIds" resultType="user" parameterType="queryvo">
     <include refid="defaultSql"></include>
      <where>
       <if test="ids != null and ids.size() > 0">
           <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
            #{uid}
           </foreach>
       </if>
      </where>
</select>

    <resultMap type="user" id="userMap">
        <id column="id" property="id"></id>
        <result column="username" property="username"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <!-- collection 是用于建立一对多中集合属性的对应关系
             ofType 用于指定集合元素的数据类型
             select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）
             column 是用于指定使用哪个字段的值作为条件查询
             -->
        <collection property="accounts" ofType="account" select="com.github.dao.IAccountDao.findByUid" column="id">

        </collection>
    </resultMap>
    <!-- 配置查询所有操作 -->
    <select id="findAll" resultMap="userMap">
   select * from user
</select>
    <!-- 根据 id 查询 -->
    <select id="findById" resultType="user" parameterType="int" useCache="true">
    select * from user where id = #{uid}
</select>
    <!--根据id 修改数据库-->
    <update id="updateUser" parameterType="user">
        UPDATE user set username=#{username}, birthday = #{birthday},sex = #{sex},address= #{address} WHERE id = #{id}
    </update>
</mapper>